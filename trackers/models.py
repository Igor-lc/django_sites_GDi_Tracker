from django.db import models


class Tracker(models.Model):  # связали класс с фреймворком через наследование
    name = models.CharField("название", max_length=50)  # связали с джанго три наши атрибуты. Первым аргументом передаем имена полей на русском для удобства.
    price = models.IntegerField("цена")
    description = models.TextField("описание")
    photo = models.ImageField("фотография", upload_to="trackers/photos", default='', blank=True)  # имя поля, каталог где хранятся фото, default="" - относится к БД, если дом не имеет фото, blank используется в админке и польволяет оставлять параметр пустым
    active = models.BooleanField("активен", default=True)  # создал поле, отвечающее за отображение трекера на сайте. BooleanField - логическое поле. default - по умолчанию. Теперь создадим поле в БД, сгенерируем и применим миграцию. Затем выведем его в админке.

    class Meta:
        verbose_name = "трекер"
        verbose_name_plural = "трекеры"
        ordering = ["-active", "name"]  # список ordering отвечает за поля по которым нужно сортировать данные по УМОЛЧАНИЮ. Можно добавить ["name", "price"]

    def __str__(self):
        return "Трекер {}".format(self.name.upper())  # Отвечает за поле вверху при добавлении в админку  The трекер “Трекер GDI_TRACKER PRO” was added successfully.


'''Чтоб в админке переименовать модель создадим подкласс Metа,он внутри модели отвечает за ее базовые настройки и метаинформацию (описательную информацию).
В том числе через мета можно задавать осмысленное имя модели. Мета работает на уровне всей модели, а не отдельных полей

При любом изменении модели, даже если оно не затрагивает БД надо сформировать файлы миграций. Откроем manage.py и выполним команду makemigrations trackers
В каталоге  migrations появилась новая миграция. Чтоб ее применить вводим команду  migrate trackers'''
